//HintName: Splat.DI.Extensions.SourceGenerated.cs

// <auto-generated />
namespace ReactiveMarbles.Locator
{
    /// <summary>
    /// Extension methods for the Splat DI source generator.
    /// </summary>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve(AllMembers=true)]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal static partial class LocatorRegistrations
    {
        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        public static void Register<TInterface, TConcrete>()
        {
        }

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name="contract">Optional contract.</param>
        public static void Register<TInterface, TConcrete>(string contract)
        {
        }

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        public static void RegisterLazySingleton<TInterface, TConcrete>()
        {
        }

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name="mode">The threading mode.</param>
        public static void RegisterLazySingleton<TInterface, TConcrete>(System.Threading.LazyThreadSafetyMode mode)
        {
        }

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name="contract">Optional contract.</param>
        public static void RegisterLazySingleton<TInterface, TConcrete>(string contract)
        {
        }

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name="contract">Optional contract.</param>
        /// <param name="mode">The threading mode.</param>
        public static void RegisterLazySingleton<TInterface, TConcrete>(string contract, System.Threading.LazyThreadSafetyMode mode)
        {
        }

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        public static void Register<T>()
        {
        }


        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name="contract">Optional contract.</param>
        public static void Register<T>(string contract)
        {
        }

        /// <summary>
        /// Registers a lazy class with its concrete class.
        /// </summary>
        public static void RegisterLazySingleton<T>()
        {
        }


        /// <summary>
        /// Registers a lazy class with its concrete class.
        /// </summary>
        /// <param name="contract">Optional contract.</param>
        public static void RegisterLazySingleton<T>(string contract)
        {
        }

        /// <summary>
        /// Registers the registrations.
        /// </summary>
        /// <param name="locator">The locator to register.</param>
        public static void SetupIOC(global::ReactiveMarbles.Locator.eactiveMarbles.Locator.IServiceLocator locator)
        {
            SetupIOCInternal(locator);
        }

        static partial void SetupIOCInternal(global::ReactiveMarbles.Locator.eactiveMarbles.Locator.IServiceLocator resolver);
    }

    /// <summary>
    /// Makes the property get added by the DI engine.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Property)]
    internal class DependencyInjectionPropertyAttribute : System.Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyInjectionPropertyAttribute"/> class.
        /// </summary>
        public DependencyInjectionPropertyAttribute()
        {
        }
    }

    /// <summary>
    /// Makes this the constructor used by the DI engine.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Constructor)]
    internal class DependencyInjectionConstructorAttribute : System.Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DependencyInjectionConstructorAttribute"/> class.
        /// </summary>
        public DependencyInjectionConstructorAttribute()
        {
        }
    }
}