// Copyright (c) 2019-2024 ReactiveUI Association Incorporated. All rights reserved.
// ReactiveUI Association Incorporated licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

namespace ReactiveMarbles.Locator.Register.SourceGenerator;

internal static class Constants
{
    public const string ClassName = "LocatorRegistrations";
    public const string NamespaceName = "ReactiveMarbles.Locator";
    public const string LocatorGetService = "GetService";
    public const string LocatorGetLazyService = "GetLazyService";
    public const string LazyTypeName = "global::System.Lazy";
    public const string ServiceLocatorInterfaceTypeName = "ReactiveMarbles.Locator.IServiceLocator";
    public const string ServiceLocatorConcreteTypeName = "ReactiveMarbles.Locator.ServiceLocator";

    public const string ConstructorAttribute = "global::ReactiveMarbles.Locator.DependencyInjectionConstructorAttribute";
    public const string PropertyAttribute = "global::ReactiveMarbles.Locator.DependencyInjectionPropertyAttribute";

    public const string ResolverType = "ReactiveMarbles.Locator.IServiceLocator";
    public const string ResolverParameterName = "resolver";

    public const string IocMethod = "SetupIOCInternal";

    // file header stuff
    public const string WarningDisable = @"//----------------------
// <auto-generated>
//     Generated by ReactiveMarbles.Locator.SourceGenerator.  DO NOT EDIT!
// </auto-generated>
//----------------------
#pragma warning disable
";

    public const string PreserveAttribute = @"//----------------------
// <auto-generated>
//     Generated by ReactiveMarbles.Locator.SourceGenerator.  DO NOT EDIT!
// </auto-generated>
//----------------------
#pragma warning disable

[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
[global::System.AttributeUsage (global::System.AttributeTargets.Class | global::System.AttributeTargets.Struct | global::System.AttributeTargets.Enum | global::System.AttributeTargets.Constructor | global::System.AttributeTargets.Method | global::System.AttributeTargets.Property | global::System.AttributeTargets.Field | global::System.AttributeTargets.Event | global::System.AttributeTargets.Interface | global::System.AttributeTargets.Delegate)]
sealed class PreserveAttribute : global::System.Attribute
{
    //
    // Fields
    //
    public bool AllMembers;
    public bool Conditional;
}";

    public const string ExtensionMethodText = @$"
// <auto-generated />
namespace {NamespaceName}
{{
    /// <summary>
    /// Extension methods for the Splat DI source generator.
    /// </summary>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve(AllMembers=true)]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
    internal static partial class {ClassName}
    {{
        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        public static void Register<TInterface, TConcrete>()
        {{
        }}

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name=""contract"">Optional contract.</param>
        public static void Register<TInterface, TConcrete>(string contract)
        {{
        }}

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        public static void RegisterLazySingleton<TInterface, TConcrete>()
        {{
        }}

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name=""mode"">The threading mode.</param>
        public static void RegisterLazySingleton<TInterface, TConcrete>(System.Threading.LazyThreadSafetyMode mode)
        {{
        }}

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name=""contract"">Optional contract.</param>
        public static void RegisterLazySingleton<TInterface, TConcrete>(string contract)
        {{
        }}

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name=""contract"">Optional contract.</param>
        /// <param name=""mode"">The threading mode.</param>
        public static void RegisterLazySingleton<TInterface, TConcrete>(string contract, System.Threading.LazyThreadSafetyMode mode)
        {{
        }}

        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        public static void Register<T>()
        {{
        }}


        /// <summary>
        /// Registers a class with its concrete class.
        /// </summary>
        /// <param name=""contract"">Optional contract.</param>
        public static void Register<T>(string contract)
        {{
        }}

        /// <summary>
        /// Registers a lazy class with its concrete class.
        /// </summary>
        public static void RegisterLazySingleton<T>()
        {{
        }}


        /// <summary>
        /// Registers a lazy class with its concrete class.
        /// </summary>
        /// <param name=""contract"">Optional contract.</param>
        public static void RegisterLazySingleton<T>(string contract)
        {{
        }}

        /// <summary>
        /// Registers the registrations.
        /// </summary>
        public static void SetupIOC()
        {{
            SetupIOCInternal(global::{ServiceLocatorConcreteTypeName}.Current());
        }}

        /// <summary>
        /// Registers the registrations.
        /// </summary>
        /// <param name=""locator"">The locator to register.</param>
        public static void SetupIOC(global::{ServiceLocatorInterfaceTypeName} locator)
        {{
            SetupIOCInternal(locator);
        }}

        static partial void SetupIOCInternal(global::{ServiceLocatorInterfaceTypeName} resolver);
    }}

    /// <summary>
    /// Makes the property get added by the DI engine.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Property)]
    internal class DependencyInjectionPropertyAttribute : System.Attribute
    {{
        /// <summary>
        /// Initializes a new instance of the <see cref=""DependencyInjectionPropertyAttribute""/> class.
        /// </summary>
        public DependencyInjectionPropertyAttribute()
        {{
        }}
    }}

    /// <summary>
    /// Makes this the constructor used by the DI engine.
    /// </summary>
    [System.AttributeUsage(System.AttributeTargets.Constructor)]
    internal class DependencyInjectionConstructorAttribute : System.Attribute
    {{
        /// <summary>
        /// Initializes a new instance of the <see cref=""DependencyInjectionConstructorAttribute""/> class.
        /// </summary>
        public DependencyInjectionConstructorAttribute()
        {{
        }}
    }}
}}";
}
